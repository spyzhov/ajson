name: Build

on:
  push:
    tags:
      - v*
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:

  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3.4.0
        with:
          version: v1.51.2
          args: -v

  test:
    strategy:
      matrix:
        go-version: [ '1.11.x', '1.12.x', '1.13.x', '1.14.x', '1.15.x', '1.16.x', '1.17.x', '1.18.x', '1.19.x', '1.20.x' ]
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go ${{ matrix.go-version }} on ${{ matrix.os }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Run tests
        run: go test -json -race ./... > TestResults-${{ matrix.os }}-${{ matrix.go-version }}.json
      - name: Upload Go test results
        uses: actions/upload-artifact@v3
        with:
          name: Go-results-${{ matrix.os }}-${{ matrix.go-version }}
          path: TestResults-${{ matrix.os }}-${{ matrix.go-version }}.json

  codecov:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go 1.20.x on ubuntu-latest
        uses: actions/setup-go@v3
        with:
          go-version: '1.20.x'
      - name: Setup Dependencies
        run: |
          go get golang.org/x/tools/cmd/cover
          go get -t -v ./...
      - name: Run Tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      - uses: codecov/codecov-action@v3
        with:
          files: ./coverage.txt
          flags: unittests
          fail_ci_if_error: true
          verbose: true
